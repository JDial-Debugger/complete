bit line3change = 0;
bit line4change = 0;
bit line5change = 0;

bit coeff0change = ??;
 int Coeff0(){
if(coeff0change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff1change = ??;
 int Coeff1(){
if(??){
return 0;}

return coeff1change;
}

bit coeff2change = ??;
 int Coeff2(){
if(coeff2change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff3change = ??;
 int Coeff3(){
if(??){
return 0;}

return coeff3change;
}

bit coeff4change = ??;
 int Coeff4(){
if(coeff4change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff5change = ??;
 int Coeff5(){
if(coeff5change == 0){
return 0;}

if(??){
return 1;}

return -1;
}

int coeff6change = ??;
 int Coeff6(){
if(??){
return 0;}

return coeff6change;
}

bit coeff7change = ??;
 int Coeff7(){
if(coeff7change == 0){
return 1;}

if(??){
return 0;}

return -1;
}

bit coeff8change = ??;
 int Coeff8(){
if(coeff8change == 0){
return 1;}

if(??){
return 0;}

return -1;
}


int[4] lineArray;
int[4] SimpleJavaaArray = {0,0,0,0};
int[4] SimpleJavabArray = {0,0,0,0};
int[4] SimpleJavacArray = {0,0,0,0};


int afinal = 0;
int finalcount = 0;
int count = -1;
 int SimpleJava(){
int linehit = 0;
(count)++;
lineArray[count] = 3;

int a = 2 + ((Coeff0()) * (Coeff1()));

(count)++;
lineArray[count] = 4;
SimpleJavaaArray[count] = a;
(linehit)++;
if(linehit == (??)){
afinal = a;
finalcount = count;
return 0;
}


int b = (((Coeff4()) * a) + 1) + ((Coeff2()) * (Coeff3()));

(count)++;
lineArray[count] = 5;
SimpleJavaaArray[count] = a;
SimpleJavabArray[count] = b;

int c = (((Coeff8()) * a) + ((Coeff7()) * b)) + ((Coeff5()) * (Coeff6()));

(count)++;
lineArray[count] = 6;
SimpleJavaaArray[count] = a;
SimpleJavabArray[count] = b;
SimpleJavacArray[count] = c;

return c;


}
harness void Constraint(){
int SyntacticDistance = 0;
int SemanticDistance = 0;
int[2] oringianlaArray = {0,2};
int correctFinal_a = 6;
SimpleJava();
for(int i = 0; i < 2; (i)++){
SemanticDistance += (SimpleJavaaArray[i]) != (oringianlaArray[i]);
}

assert (afinal == correctFinal_a);
SyntacticDistance += coeff0change;
SyntacticDistance += coeff1change;
SyntacticDistance += coeff2change;
SyntacticDistance += coeff3change;
SyntacticDistance += coeff4change;
SyntacticDistance += coeff5change;
SyntacticDistance += coeff6change;
SyntacticDistance += coeff7change;
SyntacticDistance += coeff8change;

minimize(SemanticDistance+2*SyntacticDistance);
}

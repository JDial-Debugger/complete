bit const0change = ??;
 int Const0(){
if(const0change == 1){
return ??;}else{
return 1;}
}
bit const1change = ??;
 int Const1(){
if(const1change == 1){
return ??;}else{
return 0;}
}

int[12] lineArray;
int[12] tArray = {0,0,0,0,0,0,0,0,0,0,0,0};
int[12] iArray = {0,0,0,0,0,0,0,0,0,0,0,0};


int tfinal = 0;
int ifinal = 0;
int finalcount = 0;

 int orig(int x){
int count = 0;
int linehit = 0;
int t = Const0();
(count)++;
lineArray[count] = 1;
tArray[count] = t;


for(int i = x; i > (Const1()); (i)--){
(count)++;
lineArray[count] = 1;
tArray[count] = t;
iArray[count] = i;

t = t + i;
(count)++;
lineArray[count] = 1;
tArray[count] = t;
iArray[count] = i;



}

return t;


}
harness void HammingTest(){
int[6] oringianltArray = {1,1,4,4,4,6};
int[6] oringianliArray = {0,3,3,3,2,1};
int correctFinal_t = 5;
int correctFinal_i = 1;
orig(3);
int HammingDistance = 0;
for(int i = 0; i < 6; (i)++){
if(const0change == 0){
HammingDistance = (tArray[i]) != (oringianltArray[i]);}

HammingDistance = (iArray[i]) != (oringianliArray[i]);
}

assert (tfinal == correctFinal_t);
assert (ifinal == correctFinal_i);
assert ((const0change + const1change) == 1);
minimize(HammingDistance);
}